                                  Layout Command Control - Executive Summary

   Layout Command Control (LCC) is an accessory bus system that bridges between layout accessories, train
   traction systems and legacy systems. It is designed to run across numerous transports, including
   Ethernet, WiFi, CAN, and RF. It is also designed to umbrella legacy systems into a unified whole.

   LCC allows manufacturers wide latitude to innovate, while having a solid base from which to build that
   ensures compatibility. This lets them access a larger market, while focusing on their area of expertise,
   and remaining compatible and connected to everyone's products. To this end, LCC includes a testing suite
   that not only allows manufacturers to self-check their compliance, but also allows modelers to assure
   themselves that their equipment is working and maintains compatibility.

   Modelers do not need to throw out their legacy equipment, but can easily connect to LCC, and hence to
   other legacy systems, through smart-bridges – devices which know how to buffer and translate from one
   system to LCC and back. LCC has a very large address-space which can accommodate lots of systems with
   ease. Every item (node) has a pre-assigned unique identifier number which is used to address it. Because
   these are unique, there cannot be clashes between two nodes. Modular groups can come together without
   conflicts, and advanced features allow them to quickly configure their ad hoc layout.

   LCC is well documented by the OpenLCB development team as a set of standard Protocols which generally
   follow the OSI layering scheme. These Standards documents form a complete and concise basis to build
   compliant nodes. In addition, the matching Technical Notes explain in greater detail both the intent and
   examples of the use of the Standards. Each pair of documents describes and teaches a specific protocol,
   and the protocols are designed to be internally extensible but also to form the basis of newer
   application protocols.

   In summary, LCC forms a solid infrastructure that allows modelers to use the old, but use the new, and
   grow into the future.

   LCC is designed to be:

     * Transport agnostic: it supports Ethernet, Wifi, RF, CAN, RS-422/485, etc.;

     * Traction agnostic: it supports DCC, DC, PWM, Marklin, etc.;

     * Compatible  with existing hardware: users can and should continue to use their investment, but can
       expand its capabilities. LCC is bridgeable to Loconet, Xpressnet, NCE, C\MRI, CBus, ATbus, etc.;

     * Sympathetic  to the unique challenges of modular and large layouts;

     * Simple  for the novice: plug and play, no setting of IDs or addresses, push-button programming;

     * Discoverable: A user can find out what devices are connected, and how they’re configured;

     * Expandable and extensible: new functionality to be added easily.

   To achieve the above, LCC has:

     * No central control: however a computer can be attached for configuration, debugging or operations;

     * Preassigned IDs: world-wide unique – so no address conflicts;

     * Large IDs: large enough to accommodate legacy addresses and future systems;

     * Events, Datagrams, and Streams: to handle small, medium and and continuous messages;

     * System Messages dealing with system-level processes such as node announcement, description, and
       status.

     * Interest-based  routing and filtering.

     * Self-description  and self-documentation: stored on the node.

     * Orthogonal protocols: new ones can be added easily.

   Layers:

     * Information: Glossary, Common Information, Unique and Event Identifiers

     * Physical: CAN and pending TCP Physical Layer

     * Link: CAN Frame Transfer and pending TCP Transport

     * Network/Transport: Message Network, Event, Datagram, pending Stream Transport, and Simple Node
       Information,

     * Session: Configuration Description Information, Memory Configuration, and draft Firmware Upgrade.

   February 2016 Page: 2/2
