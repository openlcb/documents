# MSC for interleaved datagram operation
msc {
  hscale="2";

  sa [label="Sending Task A"], sb [label="Sending Task B"], 
  d [label="Receiving Task"];

  sa rbox sb [label="Sending Node"], d rbox d [label="Receiving Node"];
  |||;
  --- [ label = "Two streams are initialized simultaneously " ] ;
   
  sa abox sb [label="Allocate [Source SID (1)]"];
  sa->d [linecolor="blue", label="Stream Initiate Reqest [0xFF + Source SID (1) + Buffer Size + flags + flags]"];

  sa abox sb [label="Allocate [Source SID (2)]"];
  sb->d [linecolor="red", label="Stream Initiate Reqest [0xFF + Source SID (2) + Buffer Size + flags + flags]"];

  d abox d [label="Allocate [Destination SID (11]"];
  d->sa [linecolor="blue", label="Stream Initiate Reply [Destination SID (11) + Source SID (1) + Buffer Size + Error]"];

  d abox d [label="Allocate [Destination SID (12)]"];
  d->sb [linecolor="red", label="Stream Initiate Reply [Destination SID (12) + Source SID (2) + Buffer Size + Error]"];

  |||;
  --- [ label = "Bidirectional traffic then flows based on stream IDs " ] ;

  sa->d [linecolor="blue", label="Stream Data Send [Destination SID (11) + Data]"];
  sb->d [linecolor="red", label="Stream Data Send [Destination SID (12) + Data]"];
  sb->d [linecolor="red", label="Stream Data Send [Destination SID (12) + Data]"];
  ...;
  |||;
  sa->d [linecolor="blue", label="Stream Data Send [Destination SID (11) + Data]"];
  sb->d [linecolor="red", label="Stream Data Send [Destination SID (12) + Data]"];
  ...;
  |||;
  --- [ label = "Close one of the streams, the other keeps going" ] ;
  sa->d [linecolor="blue", label="Stream Data Complete [Destination SID (11) + Source SID (1) + (Optional) Payload Size]"];
  sa abox sb [label="Deallocate [Source SID (1)]"], d abox d [label="Deallocate [Destination SID (11)]"];
  ...;
  |||;
  sb->d [linecolor="red", label="Stream Data Send [Destination SID (12) + Data]"];
  sb->d [linecolor="red", label="Stream Data Send [Destination SID (12) + Data]"];
}
