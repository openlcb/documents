                                                                OpenLCB Technical Note

                                                                       Glossary

                                                       Feb 6, 2016                       Adopted            

                                                1 Introduction

   This glossary provides working definitions and commentary on definitions for OpenLCB. It is not
   normative in any way.

   We provide a separate section of “Key Terms” for initial reading.

                                                 2 Key Terms

   Event
           OpenLCB allows nodes to notify each other when specific "events" occur on the layout. These in
           turn can cause nodes to take particular actions. Events are not necessarily attached to a
           producer (“Button 2 pressed”) or attached to a consumer (“Turn off light 4”), but rather to an
           overall state change (“Set for nighttime operation”). This is called a “Producer/Consumer
           model”.

   Node
           A “node” is the basic unit of addressability in OpenLCB. It can be a single board, or a process
           in a larger computer, or any other independent actor on the OpenLCB network.
           Every OpenLCB interaction originates in a node. Every board that connects to OpenLCB is at least
           one node. For example, a simple turnout controller board is one node, while a PC with multiple
           programs running may contain several nodes.

   Message
           The basic unit of OpenLCB communication. OpenLCB nodes exchange messages to control
           communications and to move information. Some interactions may be just a single message (for
           example pressing a fascia button, which causes an event to be produced, which an output node
           receives and throws a turnout). Other interactions may use a request message followed by a
           response message. More complicated interactions may need to move dozens of messages or even more
           between nodes.
           Protocol
           An OpenLCB protocol defines how messages are exchanged to do some particular thing. OpenLCB
           protocols are layered, with higher-level protocols being implemented with lower-level protocols.
           Low level protocols are used for things like sending datagrams, exchanging events, and doing
           link start-up. Higher-level protocols then define how configuration information is exchanged, or
           a node's memory can be read, or a message can be put on a display.

                                              3 General Glossary

   Addressed
           An “addressed” message is meant for only a single node. Contrast “global”.

   Alias
           An Alias is a unique identifier associated to a Node to be used, temporarily during a session,
           as its address instead of its Node ID. The Alias can always be mapped back and forth to the full
           number. On CAN, the Node ID Alias is a 12-bit value and thus more suited for CAN's limited
           packet sizes. The term Alias is often used with a modifier, as in “Source Alias”, “Destination
           Alias” where Source and Destination describe a Node taking part of the interaction.

   Automatically Routed Event
           The Event transfer protocol defines a series of messages that determine where Event messages
           must be routed. Automatically Routed Events are events within a particular part of the EventID
           space that are routed to all nodes, without using those messages. See the Event Transport
           protocol documentation for more information. An example Automatically Routed Event ID is that of
           “Emergency Off”.

   Board
           “Board” has no precise meaning in OpenLCB. It generally refers to a single piece of electronics.
           Sometimes used to refer to “the piece of electronics that implements a Node”. Note that a Board
           may contain one or more Nodes.

   Blue/Gold
           An example of a simple button-based system to allow teaching of Event IDs from one node to
           another.

   Bridge
           A bridge connects multiple segments of an OpenLCB bus together. Usually a bridge works on the
           data link layer of the OSI model, and therefore has knowledge only about those messages
           transferred, but not about the meaning of the messages as they are defined in a higher layer of
           the OSI model, such as at the transport layer. Similarly to a repeater, a bridge may be used to
           allow the connection of more nodes than is possible on one segment due to physical limitations,
           but this is not its main purpose. Usually a bridge does not translate between different wire
           protocols, and for that a gateway is used. A bridge differs from a repeater in that a bridge can
           forward messages to different segments based on Node ID. To do this, the bridge listens to and
           interprets the messages transferred in order to learn which nodes are connected to which
           segment. For OpenLCB the bridge may also support different node aliases on the different
           segments to which it is connected. It this case, it would translate the node alias before
           forwarding that frame to another segment.

   CBUS
           A universal layout control system from MERG, based on CAN using 11-bit headers at 125 kbps.

   CDI
           “Configuration Description Information”, the information provided by a node so that other nodes
           can understand what the configuration information in the first node includes, how it's organized
           and how to present it to a user in a Configuration Tool. See the Configuration Description
           Information documents.

   Configuration Tool
           A node on the OpenLCB network, possibly implemented as software running on a computer, with
           sufficient User Interface to browse other nodes on the network, retrieve and understand the
           information provided by the CDI, render the configuration options to the user and manipulate the
           configuration memory of the target node according to the choices of the user. An example is JMRI
           DecoderPro, see http://www.jmri.org.

   Datagram
           The actual data content transported by the Datagram Protocol. This can be up to 72 bytes.

   Datagram Protocol
           The datagram protocol is a way for a OpenLCB node to efficiently send a short, definite-length
           message to another specific node. In that, it lies in between the event exchange protocol, which
           efficiently sends very short event IDs to all interested nodes, and the streaming protocol,
           which sends long messages between specific nodes, at some cost in efficiency. Sending a datagram
           can take multiple messages on limited transports, such as CAN.
           Datagram Protocol ID (DPID or DPI)
           The first 1-7 bytes of data transferred by a datagram is used to indicate the protocol being
           transported, but the encoding is extensible and the most common case use is to use a single
           byte.

   Device
           “Device” has no precise meaning in OpenLCB. It generally refers to a single piece of equipment
           on a layout connected to a Node.

   Destination Node ID (DID)
           The Node ID of the node to which a specific message is addressed.

   Event Exchange Protocol
           This protocol uses PCER (Producer-Consumer Event Report) messages to propagate Event IDs from
           source nodes to multiple destination nodes. These messages are typically used to announce that
           something of interest has happened on the layout, and consequently a change in the layout's
           state, so that controlled devices can respond. The protocol also includes inquiry and response
           messages for examining configuration and status. See Event Transport S&TN.

   Event ID (EID)
           The 64-bit unsigned number that identifies a specific event. OpenLCB event IDs must be globally
           unique. NB: Events are not associated with any particular node. It may be convenient to use, for
           example, Node ID as a way of numbering them uniquely, but Node IDs and Event IDs are not
           directly related.

   Gateway
           A Gateway translates between different wire protocols (e.g. CAN and Ethernet), or even different
           network architectures (e.g. OpenLCB and Loconet). They repackage and convert data going from one
           environment to another so that each environment can understand the other's data. Since OpenLCB
           uses unique identifiers, and these are meant to be used unchanged on most wire protocols, this
           should reduce the necessity of Gateways.
           Global
           A “Global” message is meant for all OpenLCB nodes that are interested in it. Contrast
           “Addressed”.

   Installation
           An OpenLCB installation, or OpenLCB network, is the complete set of OpenLCB hardware, software,
           nodes, etc, that can be reached from any one of them.

   Message Type Indicator (MTI)
           Every OpenLCB message contains a Message Type Indicator field that identifies the type of that
           particular message. Also used to refer to a particular value for that field. These are
           documented in the relevant Standard and Technical Note.

   MERG
           Model Electronic Railway Group, http://merg.org.uk

   Node ID (NID)
           Number identifying a specific node. OpenLCB Node IDs must be globally unique, so they form a
           one-to-one mapping to the nodes themselves. OpenLCB Node IDs are 48-bit long.

   OSI model
           A conceptual model for communication networks, where the protocols are divided into layers, each
           layer building upon the lower layers and providing an abstraction of service for the upper
           layers. See http://en.wikipedia.org/wiki/OSI_model

   Producer/Consumer Model
           A way of thinking about communications on a layout network. Events (unique messages on the
           layout network) are “produced” by some node(s), and “consumed” by other node(s). An event
           indicates something happened, but the corresponding message isn't necessarily a status report or
           a command for something to change; it's just an announcement of the event. That event can be
           produced by many different sources (e.g. the “use passing siding” event could be produced by a
           push button at either end of the siding, or on a dispatcher panel), and can be consumed by
           several sources (it can turn on lamps on a panel, change signal aspects, set turnouts in
           multiple places, set an internal software flag, etc).

   Producer-Consumer Event Report (PCER)
           OpenLCB message type sent globally by producers of a particular Event to indicate that it has
           occurred, so that the corresponding consumers of that Event are notified. The PCER is documented
           in the Event Transport documents.

   Repeater
           Connects two segments of the same type at the physical layer of the OSI model. It regenerates
           the received signals and then retransmits the regenerated (or conditioned) signals on the other
           segment. It has no knowledge of the information transferred. It is usually used to connect two
           like segments, e.g. two CAN segments, to allow more nodes to be attach to the combined segments
           as if they were one. They can be used to overcome physical limitations of a segment, such as
           maximum number of nodes, or cable length.

   Router
           Routers work at the Network layer of the OSI model, meaning that they can route frames across
           multiple segments based on only the information contained in messages. They do not have
           knowledge about protocols of (higher) transport layers. Routers are usually used in complex
           network situations because they provide better traffic management than bridges, such as traffic
           filtering, and do not pass broadcast traffic. Routers can share status and routing information
           with one another, and can use this information to bypass slow or malfunctioning segments.

   Source Node ID (SID)
           The Node ID of the node which originated a specific message.

   Segment
           Subset of an overall OpenLCB installation which uses a specific wire protocol, and all nodes on
           it are directly talking to each other. A segment never spans over Bridges, Gateways, Repeaters
           or Routers, but it may have multiple cables, for example if the physical link layer allows
           daisy-chaining multiple nodes.

   Simple Node
           A “simple node” is typically an individual board with a small processor on it which one
           connection to an OpenLCB network. A simple node doesn't initiate complex communications with
           other nodes, but may be the target of complex interactions, for example when it is being
           configured. This is documented in the Message Network S&TN.

   Stream
           Streams are a method of moving a large number of bytes, or an a-priori unknown number of bytes,
           from a source node to a destination node. The streaming protocol defines a way to do this in
           OpenLCB.
           Streaming Protocol
           Protocol that defines the messages and interactions to setup a stream transfer, move the data
           along with the necessary buffer management, and then take down the transfer at the end. Streams
           are efficient ways to move large amounts of data when the setup and take-down process can be
           considered a negligible part of the total transfer. This is documented in the Stream Transport
           S&TN.

   Virtual Node
           One of one or more nodes co-resident within a single board or computer. Often a board is a
           single node, but it's possible for a board or a computer to behave on the OpenLCB network as if
           it contained multiple nodes. Those are then referred to as virtual nodes.

   Well Known Events
           Certain Events are globally defined to have specific meanings. Their Event IDs are documented as
           part of the event protocol. These are documented in the Event Identifiers S&TN.

   Wire protocol
           The version of the OpenLCB common messages, interactions, etc. adapted to a particular transport
           mechanism. Examples are the wire protocols for CAN bus segments and TCP/IP links.

                                                4 CAN Glossary

   Alias
           See the general definition. On CAN an Alias is a 12-bit mapping of the Node ID.

   CAN
           Controller Area Network, an ISO-standardized communication network type. The CAN Standard
           includes aspects of the physical- and link-layer definitions for OpenLCB.

   Frame
           A Frame is a packet as it is defined on the CAN bus. It consists of an 11 or 29 bit CAN header,
           zero through 8 bytes of data, and some additional bits and fields. An OpenLCB message may become
           one or more frames when transmitted over CAN. Some frames, called Control Frames, are used for
           link-layer control and do not correspond to any particular OpenLCB message, and are used in the
           management of Node ID Aliases.

   OpenLCB-CAN
           Short form for “OpenLCB as implemented on a CAN link”. For example, “OpenLCB-CAN message” refers
           to an OpenLCB message formatted for transmission over a CAN link.

   Segment
           See general definition. Note that nodes on a single CAN segment share CAN arbitration and a set
           of aliases.

   Table of Contents

   1 Introduction 1

   2 Key Terms 1

   3 General Glossary 1

   4 CAN Glossary 5

   Copyright 2011-2016. All rights reserved. See http://openlcb.org/Licensing.html for license terms.  Page
   1 of 6 - Feb 6, 2016
